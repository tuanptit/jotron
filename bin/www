#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vhf:server');
var http = require('http');

var Device = require('../app/model/device');
var Alarm = require('../app/model/alarm');


var socket = require('socket.io');
var snmp = require ("net-snmp");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socket.listen(server);

var options = {
  port: 162,
  disableAuthorization: true,
  transport: "udp4"
};
var callback = function (error, notification) {
  if ( error ) {
    console.error (error.toString());
  } else {
    console.log (JSON.stringify(notification, null, 2));
  }
};

io.on('connection', function (socket) {
  console.log('connected');
  // emit data to client
});
snmp.createReceiver(options, function(error, data){
  // var m = 0;
  for(var i= 0; i < data.pdu.varbinds.length; i++) {

    var oid = (data.pdu.varbinds[i].oid);
    var value = (data.pdu.varbinds[i].value.toString());
    console.log(oid+"----"+value);

    var date_now = new Date();
    var date = date_now.getHours()+":"+date_now.getMinutes()+":"+date_now.getSeconds()+
        " "+date_now.getDate()+"/"+parseInt(date_now.getMonth()+1)+"/"+date_now.getFullYear();
    if(oid == "1.3.6.1.4.1.22154.3.1.2.5.2.1.0" || oid == "1.3.6.1.4.1.22154.3.1.2.5.2.1.0") {
      var buf = data.pdu.varbinds[i].value;
      var json = buf.toJSON(buf);
      var data_buf = json.data;

      console.log(data_buf);
      var buffer_data = "";
      for( var k = 0; k < data_buf.length; k ++) {
        var bin = data_buf[k].toString(2);
        while(bin.length < 8) {
          bin = "0" + bin;
        }
        buffer_data = buffer_data+":"+bin;
      }
      var result = buffer_data.substring(1);
      var item = {
        ip: data.pdu.agentAddr,
        date: date,
        value: result
      }
      console.log(item);
      if(item.ip != null) {
        var mAlarm = new Alarm({
          ip_address: item.ip,
          error: item.value,
          date: date
        });

        mAlarm.save(function (err) {
          if (err) {
            console.log(err)
            io.sockets.emit('trap', err);
            return;
          } else {
            Device.update({
              ip_address: mAlarm.ip_address
            }, {
              $push: {
                alarms: mAlarm._id
              }
            }, function (err, newMux) {
              if (err) {
                console.log(err)
                io.sockets.emit('trap', err);
                return;
              } else {
                io.sockets.emit('trap', newMux);
              }
            });
          }
        })
      }

    }

    io.sockets.emit('trap', oid);
  }

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
