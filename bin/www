#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vhf:server');
var http = require('http');

var Device = require('../app/model/device');
var Alarm = require('../app/model/alarm');
var async = require('async');

var ping = require('ping');

var socket = require('socket.io');
var snmp = require ("net-snmp");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socket.listen(server);


var PORT = 33333;
var HOST = '127.0.0.1';

var dgram = require('dgram');
var client = dgram.createSocket('udp4');


var options = {
  port: 160,
  disableAuthorization: true,
  transport: "udp4"
};
var callback = function (error, notification) {
  if ( error ) {
    console.error (error.toString());
  } else {
    console.log (JSON.stringify(notification, null, 2));
  }
};

io.on('connection', function (socket) {
  console.log('connected');
  // emit data to client
});

// connect to server socker io

//client.js
var io_client = require('socket.io-client');
var socket_client = io_client.connect('http://localhost:8080', {reconnect: true});

snmp.createReceiver(options, function(error, data){
  // var m = 0;
  for(var i= 0; i < data.pdu.varbinds.length; i++) {

    var oid = (data.pdu.varbinds[i].oid);
    var value = (data.pdu.varbinds[i].value.toString());
    console.log(oid+"----"+value);

    var date_now = new Date();
    var date = date_now.getHours()+":"+date_now.getMinutes()+":"+date_now.getSeconds()+
        " "+date_now.getDate()+"/"+parseInt(date_now.getMonth()+1)+"/"+date_now.getFullYear();
    if(oid == "1.3.6.1.4.1.22154.3.1.2.5.1.1.0" || oid == "1.3.6.1.4.1.22154.3.1.2.5.2.1.0") {
      console.log('ALARM!');
      var buf = data.pdu.varbinds[i].value;
      var json = buf.toJSON(buf);
      var data_buf = json.data;
      var buffer_data = "";
      for( var k = 0; k < data_buf.length; k ++) {
        var bin = data_buf[k].toString(2);
        while(bin.length < 8) {
          bin = "0" + bin;
        }
        buffer_data = buffer_data+bin;
      }
      var result = convertToAlarm(buffer_data, oid);
      var item = {
        ip: data.pdu.agentAddr,
        date: date,
        value: result
      }

      console.log(item);
      if(item.ip != null && item.value.length > 0) {
        var mAlarm = new Alarm({
          ip_address: item.ip,
          error: item.value,
          date: date,
          name: ""
        });
        Device.findOne({
          ip_address: mAlarm.ip_address
        }, function(err, device) {
          var name ="";
          if(device){
             name = device.name;
          } else {
             name = "Unknown Device"
          }

          mAlarm.name = name;
          mAlarm.save(function(err) {
            if(err) {
              console.log(err)
              io.sockets.emit('trap', err);
              return;
            } else{
              socket_client.emit('jotron', {
                type: 'error',
                result: mAlarm
              });
            }
          });
        });
      }

    } else if(oid == "1.3.6.1.4.1.22154.3.1.2.3.2.0") { //PTT
      Device.findOne({
        ip_address: data.pdu.agentAddr
      }, function(err, device) {
        var name ="";
        if(device){
          name = device.name;
        } else {
          name = "Unknown Device"
        }
        socket_client.emit('jotron', {
          type: 'ptt',
          result: {
            date: date,
            msg: name+ " Keyed!"
          }
        });
      });

    }
    io.sockets.emit('trap', oid);  //
    io.sockets.emit('alarm', oid);
  }
});

var frequency = 5000; //5 second
Device.find({},
    function (err, device) {
      if(err) {
        res.json({
          code: 1,
          result:'err'
        })
      } else {
        var list =[];
        for(var i = 0; i, i < device.length; i++) {
          list.push(device[i].ip_address);
        }
        var frequency = 3000; //10 second
        list.forEach(function(item){
          setInterval(function() {
            ping.sys.probe(item, function(active){
              if(!active){
                io.sockets.emit('ping-error', data = {
                  ip_address: item,
                  list: device
                });
              } else {
                io.sockets.emit('ping-ok', data = {
                  ip_address: item,
                  list: device
                });
              }
            });
          }, frequency);
        });
      }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function convertToAlarm(bit, oid) {
  var  TX_ALARMS =  ["txAlarm", "txPaModuleAlarm", "txModModuleAlarm", "txFrontModuleAlarm",
    "txMainModuleAlarm","txExternalAlarm","txForcedAlarm","txExtUnitAlarm",
    "txPASWRAlarm","txPACurrentAlarm","txPATemperatureAlarm","txPA28V0Alarm",
    "txPA12V0Alarm","txPA5V0Alarm","txPA3V3Alarm","txPA5V0Neg",
    "txPAFanFailure", "txPAPwrOutAlarm","txRFTuneAlarm","txModLoLvlAlarm",
    "txModLoLockAlarm","txMod6V0Alarm","txPowerACAlarm","txMainInStby",
    "txMainEthernetAlarm","txMainCodecAlarm","txMainSPIAlarm",
    "txMainFrontAlarm","txMainRemExpAlarm","txMainBiteADCAlarm",
    "txMainMemAlarm","txSpareAlarm31"];

  var  RX_ALARMS = ["rxAlarm", "rxRfModuleAlarm", "rxPowerModuleAlarm", "rxFrontModuleAlarm",
      "rxMainModuleAlarm","rxExternalAlarm","rxForcedAlarm","rxSpareAlarm7",
      "rxRFLoLvlAlarm","rxRFLoLockAlarm","rxRF6V0Alarm","rxRFLNACurrentAlarm",
      "rxRFIFCurrentAlarm","rxRF30V0Alarm","rxSpareAlarm14","rxPowerACAlarm",
      "rxPower12V0Alarm","rxPower5V0Alarm","rxPower3V3Alarm","rxPowerAlarm",
      "rxPowerCurrentAlarm","rxPowerDCInputAlarm","rxCodecLDAlarm","rxMainAGCAlarm",
      "rxMainEthernetAlarm","rxMainCodecAlarm","rxMainSPIAlarm",
      "rxMainFrontAlarm","rxMainRemExpAlarm","rxMainBiteADCAlarm",
      "rxMainMemAlarm","rxMainIFAlarm"]
  // bit = "11000000100000000000000100000000";
  var arr = bit.split("");
  var result = [];
  for(var i = 0; i < arr.length; i++) {
      if(arr[i] == "1") {
        if(oid == "1.3.6.1.4.1.22154.3.1.2.5.1.1.0") {
          result.push(TX_ALARMS[i]);
        } else {
          result.push(RX_ALARMS[i]);
        }
      }
  }
  return result;
}